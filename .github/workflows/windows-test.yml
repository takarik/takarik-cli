name: Windows Build Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Crystal on Windows
      shell: powershell
      run: |
        Write-Host "Installing Crystal on Windows..." -ForegroundColor Cyan

        # Use portable Crystal instead of GUI installer to avoid hanging
        Write-Host "Downloading Crystal portable package..." -ForegroundColor Yellow
        $ProgressPreference = 'SilentlyContinue'

        try {
          # Get the latest Crystal release for Windows
          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/crystal-lang/crystal/releases/latest"
          $windowsAsset = $releases.assets | Where-Object { $_.name -like "*windows*msvc*zip" } | Select-Object -First 1

          if ($windowsAsset) {
            Write-Host "Found Crystal portable: $($windowsAsset.name)" -ForegroundColor Green
            $zipPath = "$env:TEMP\crystal-portable.zip"
            $extractPath = "C:\crystal"

            Write-Host "Downloading portable package..." -ForegroundColor Yellow
            Invoke-WebRequest -Uri $windowsAsset.browser_download_url -OutFile $zipPath

            Write-Host "Extracting Crystal..." -ForegroundColor Yellow
            Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force

            # Find the actual crystal directory inside the extracted folder
            $crystalDir = Get-ChildItem -Path $extractPath -Directory | Where-Object { $_.Name -like "*crystal*" } | Select-Object -First 1
            if ($crystalDir) {
              $crystalBinPath = "$($crystalDir.FullName)\bin"
              Write-Host "Crystal extracted to: $crystalBinPath" -ForegroundColor Cyan
            } else {
              $crystalBinPath = "$extractPath\bin"
              Write-Host "Using fallback path: $crystalBinPath" -ForegroundColor Yellow
            }

            # Verify the path exists and contains crystal.exe
            if (Test-Path "$crystalBinPath\crystal.exe") {
              Write-Host "✅ Crystal executable found at: $crystalBinPath\crystal.exe" -ForegroundColor Green

              # Add to PATH for current session
              $env:PATH = "$crystalBinPath;$env:PATH"

              # Add to PATH for subsequent GitHub Actions steps
              echo "$crystalBinPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

              Write-Host "Verifying Crystal installation..." -ForegroundColor Yellow
              & "$crystalBinPath\crystal.exe" --version
              & "$crystalBinPath\shards.exe" --version

              Write-Host "✅ Crystal portable installation successful!" -ForegroundColor Green
              exit 0
            } else {
              Write-Host "❌ Crystal executable not found at expected location" -ForegroundColor Red
              Write-Host "Contents of $extractPath:" -ForegroundColor Yellow
              Get-ChildItem -Path $extractPath -Recurse -Name "crystal.exe" | ForEach-Object { Write-Host "  Found: $_" }
              throw "Crystal executable not found"
            }
          } else {
            throw "No Windows portable package found in latest release"
          }
        } catch {
          Write-Host "Portable download failed: $($_.Exception.Message)" -ForegroundColor Red
          Write-Host "Trying Scoop installation..." -ForegroundColor Yellow

          # Fallback to Scoop method
          if (!(Get-Command scoop -ErrorAction SilentlyContinue)) {
            Write-Host "Installing Scoop..." -ForegroundColor Cyan
            Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
            iwr -useb get.scoop.sh | iex
          }

          # Add Crystal bucket and install
          scoop bucket add crystal-preview https://github.com/neatorobito/scoop-crystal
          scoop install crystal

          # Find Scoop Crystal installation path
          $scoopCrystalPath = "$env:USERPROFILE\scoop\apps\crystal\current\bin"
          if (-not (Test-Path $scoopCrystalPath)) {
            $scoopCrystalPath = "$env:USERPROFILE\scoop\shims"
          }

          if (Test-Path "$scoopCrystalPath\crystal.exe") {
            Write-Host "✅ Scoop Crystal found at: $scoopCrystalPath" -ForegroundColor Green

            # Add to PATH for current session
            $env:PATH = "$scoopCrystalPath;$env:PATH"

            # Add to PATH for subsequent GitHub Actions steps
            echo "$scoopCrystalPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

            Write-Host "Verifying Scoop Crystal installation..." -ForegroundColor Yellow
            crystal --version
            shards --version

            Write-Host "✅ Scoop Crystal installation successful!" -ForegroundColor Green
          } else {
            Write-Host "❌ Crystal not found even after Scoop installation" -ForegroundColor Red
            Write-Host "Checking common Scoop locations..." -ForegroundColor Yellow
            Get-ChildItem -Path "$env:USERPROFILE\scoop" -Recurse -Name "crystal.exe" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  Found: $_" }
            exit 1
          }
        }

    - name: Verify Crystal and Shards
      shell: powershell
      run: |
        Write-Host "Final verification of Crystal and Shards..." -ForegroundColor Cyan

        # Check if Crystal is available
        try {
          $crystalVersion = & crystal --version
          Write-Host "✅ Crystal available: $($crystalVersion.Split("`n")[0])" -ForegroundColor Green
        } catch {
          Write-Host "❌ Crystal not found in PATH" -ForegroundColor Red
          Write-Host "Current PATH includes:" -ForegroundColor Yellow
          $env:PATH.Split(';') | Where-Object { $_ -like "*crystal*" } | ForEach-Object { Write-Host "  $_" }
          Write-Host "Searching for crystal.exe..." -ForegroundColor Yellow
          Get-ChildItem -Path "C:\" -Recurse -Name "crystal.exe" -ErrorAction SilentlyContinue | Select-Object -First 5 | ForEach-Object { Write-Host "  Found: $_" }
          exit 1
        }

        # Check if Shards is available
        try {
          $shardsVersion = & shards --version
          Write-Host "✅ Shards available: $($shardsVersion.Split("`n")[0])" -ForegroundColor Green
        } catch {
          Write-Host "❌ Shards not found in PATH" -ForegroundColor Red
          Write-Host "Current PATH includes:" -ForegroundColor Yellow
          $env:PATH.Split(';') | Where-Object { $_ -like "*crystal*" } | ForEach-Object { Write-Host "  $_" }
          exit 1
        }

    - name: Install dependencies
      shell: powershell
      run: |
        Write-Host "Installing Shards dependencies..." -ForegroundColor Cyan
        shards install

    - name: Build application
      shell: powershell
      run: |
        Write-Host "Building Takarik CLI..." -ForegroundColor Cyan
        shards build --production

        # Check if executable was created
        Write-Host "Checking for built executable..." -ForegroundColor Yellow
        Get-ChildItem bin -ErrorAction SilentlyContinue | Format-Table Name, Length

        if (Test-Path "bin\takarik.exe") {
          Write-Host "✅ takarik.exe created successfully!" -ForegroundColor Green
        } elseif (Test-Path "bin\takarik") {
          Write-Host "✅ takarik binary created successfully!" -ForegroundColor Green
        } else {
          Write-Host "❌ No executable found in bin/" -ForegroundColor Red
          Write-Host "Contents of bin directory:" -ForegroundColor Yellow
          Get-ChildItem bin -ErrorAction SilentlyContinue
          exit 1
        }

    - name: Test basic functionality
      shell: powershell
      run: |
        Write-Host "Testing basic CLI functionality..." -ForegroundColor Cyan

        # Determine binary path
        if (Test-Path "bin\takarik.exe") {
          $binary = ".\bin\takarik.exe"
        } elseif (Test-Path "bin\takarik") {
          $binary = ".\bin\takarik"
        } else {
          Write-Host "❌ No executable found for testing!" -ForegroundColor Red
          exit 1
        }

        Write-Host "Testing version command with: $binary" -ForegroundColor Yellow
        & $binary --version

        Write-Host "Testing help command..." -ForegroundColor Yellow
        & $binary --help

    - name: Test new project creation
      shell: powershell
      run: |
        Write-Host "Testing project creation..." -ForegroundColor Cyan

        # Determine binary path
        if (Test-Path "bin\takarik.exe") {
          $binary = ".\bin\takarik.exe"
        } elseif (Test-Path "bin\takarik") {
          $binary = ".\bin\takarik"
        } else {
          Write-Host "❌ No executable found for testing!" -ForegroundColor Red
          exit 1
        }

        # Create a test project
        New-Item -ItemType Directory -Path "test-output" -Force
        Set-Location "test-output"

        Write-Host "Creating new test project..." -ForegroundColor Yellow
        & $binary new test-app .

        # Verify project structure was created
        if (Test-Path "test-app") {
          Write-Host "✅ Project directory created!" -ForegroundColor Green
          Write-Host "Project structure:" -ForegroundColor Cyan
          Get-ChildItem "test-app" -Recurse | Select-Object Name, Mode | Format-Table -AutoSize
        } else {
          Write-Host "❌ Project directory not created!" -ForegroundColor Red
          exit 1
        }

        # Try to build the generated project
        Set-Location "test-app"
        if (Test-Path "shard.yml") {
          Write-Host "Testing generated project build..." -ForegroundColor Yellow
          shards install
          shards build
          Write-Host "✅ Generated project builds successfully!" -ForegroundColor Green
        }

    - name: Run specs (if any)
      shell: powershell
      run: |
        Write-Host "Running Crystal specs..." -ForegroundColor Cyan
        if (Test-Path "spec") {
          crystal spec
        } else {
          Write-Host "No spec directory found, skipping tests." -ForegroundColor Yellow
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-build
        path: |
          bin/
          test-output/
        retention-days: 7

  test-powershell-installer:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test PowerShell installer (dry run)
      shell: powershell
      run: |
        Write-Host "Testing PowerShell installer syntax..." -ForegroundColor Cyan

        # Test that the PowerShell script has valid syntax
        $scriptPath = ".\install.ps1"
        if (Test-Path $scriptPath) {
          $errors = $null
          $tokens = $null
          $ast = [System.Management.Automation.Language.Parser]::ParseFile($scriptPath, [ref]$tokens, [ref]$errors)

          if ($errors.Count -eq 0) {
            Write-Host "✅ PowerShell script has valid syntax!" -ForegroundColor Green
          } else {
            Write-Host "❌ PowerShell script has syntax errors:" -ForegroundColor Red
            $errors | ForEach-Object { Write-Host "  - Line $($_.Extent.StartLineNumber): $($_.Message)" -ForegroundColor Red }
            exit 1
          }
        } else {
          Write-Host "❌ install.ps1 not found!" -ForegroundColor Red
          exit 1
        }

        # Test help parameter
        Write-Host "Testing script help..." -ForegroundColor Yellow
        Get-Help .\install.ps1 -ErrorAction SilentlyContinue

        Write-Host "✅ PowerShell installer tests passed!" -ForegroundColor Green